<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tianz.bd</groupId>
    <artifactId>Api</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>spark</module>
        <module>flink</module>
        <module>scala</module>
        <module>nosql</module>
    </modules>

    <properties>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.test.version>3.0.3</scala.test.version>
        <flink.version>1.10.0</flink.version>
        <statefun.flink.common>2.2.0</statefun.flink.common>
        <spark.version>2.4.3</spark.version>
        <hadoop.version>2.7.0</hadoop.version>
        <junit.version>4.12</junit.version>
        <jackson.version>2.9.9</jackson.version>
        <akka.version>2.5.32</akka.version>
        <apache.httpClient.version>4.5.6</apache.httpClient.version>
        <slf4j.version>1.8.0-beta4</slf4j.version>
        <commons.lang3.version>3.3.2</commons.lang3.version>
        <CodeCacheSize>512m</CodeCacheSize>
    </properties>

    <profiles>
        <profile>
            <!-- 本地开发环境 -->
            <id>dev</id>
            <properties>
                <profile.active>true</profile.active>
                <skip.test>true</skip.test>
                <!--该依赖maven传递到依赖的项目中，会随着项目一起发布
                compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。
                打包的时候通常需要包含进去。-->
                <profile.scope>compile</profile.scope>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <!-- 发布环境 -->
            <id>prod</id>
            <properties>
                <profile.active>prod</profile.active>
                <skip.test>true</skip.test>
                <!-- 该依赖maven会从repository中找
                provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。
                事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。 -->
                <profile.scope>provided</profile.scope>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
    </profiles>

   <!-- scope的分类
    compile
    默认就是compile，什么都不配置也就是意味着compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。

    test
    scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。

    runntime
    runntime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已，说实话在终端的项目（非开源，企业内部系统）中，和compile区别不是很大。比较常见的如JSR×××的实现，对应的API jar是compile的，具体实现是runtime的，compile只需要知道接口就足够了。oracle jdbc驱动架包就是一个很好的例子，一般scope为runntime。另外runntime的依赖通常和optional搭配使用，optional为true。我可以用A实现，也可以用B实现。

    provided
    provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。

    system
    从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需要配合systemPath属性使用。-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <configuration>
                    <!-- Specially disable assertions since some Hive tests fail them -->
                    <argLine>-da -Xmx3g -XX:ReservedCodeCacheSize=${CodeCacheSize}</argLine>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>